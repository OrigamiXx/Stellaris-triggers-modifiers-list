[19:42:36][game_application.cpp:264]: Game Version: Kennedy v1.4.1
[19:42:36][defines.cpp:113]: 1030 defines loaded
[19:43:06][consolecmdimpl.cpp:2501]: 
== TRIGGER DOCUMENTATION ==
text - For 'desc={trigger={' use. Shows custom text
text = <text>
Supported Scopes: all
Supported targets: none

custom_tooltip - Replaces the tooltips for the enclosed triggers with a custom text
custom_tooltip = {
	text = <text>
	<triggers>
}
Supported Scopes: all
Supported targets: none

if - A conditional trigger
if = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

and - all inside trigger must be true
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

or - At least one entry inside the trigger must be true
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

not - An inverted trigger
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

happiness - Checks the pop's happiness percentage
happiness < 90
Supported Scopes: pop
Supported targets: none

has_ring - Checks if the planet has a planetary ring
has_ring = yes
Supported Scopes: planet
Supported targets: none

hidden_trigger - Hides the tooltip for the triggers within
hidden_trigger = { <triggers> }
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_owner - Checks if the planet/system is colonized
has_owner = yes
Supported Scopes: planet
Supported targets: none

any_owned_planet - Checks if any of the country's owned planets meet the specified criteria
any_owned_planet = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_controlled_planet - Checks if any of the country's controlled planets meet the specified criteria
any_controlled_planet = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_ai - Checks if the country is played by the AI
is_ai = no
Supported Scopes: country
Supported targets: none

always - Sets trigger to be either always true or false
always = yes
Supported Scopes: all
Supported targets: none

has_trait - Checks if a pop/leader/species/country's dominant species has a certain trait
has_trait = leader_trait_carefree
Supported Scopes: country pop
Supported targets: none

has_ethic - Checks if a country has a certain ethos
has_ethic = ethic_fanatic_pacifist
Supported Scopes: country pop
Supported targets: none

is_moon - Checks if the planet is the moon of another planet
is_moon = yes
Supported Scopes: planet
Supported targets: none

opinion - Checks the country's opinion of the target country
opinion = { who = <target> value = -70 }
Supported Scopes: country
Supported targets: ???

any_pop - Checks if any of the planet/species/pop faction/sector's pops meet the specified criteria
any_pop = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_owned_by - Checks if the planet/system/army/ship is owned by the target country
is_owned_by = <target>
Supported Scopes: planet ship
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_same_species - checks if a pop or empire is of the same species as another pop or empire
Supported Scopes: country pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_war_defender - Checks if any defending countries in any of the current country's wars meet the specified criteria
any_war_defender = {
	enemy = <target>
	<triggers>
}
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_war_attacker - Checks if any attacking countries in any of the current country's wars meet the specified criteria
any_war_defender = {
	enemy = <target>
	<triggers>
}
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

ideal_planet_class - Checks if the country's ideal planet class is a specific class
ideal_planet_class = pc_tundra
Supported Scopes: country
Supported targets: none

is_same_empire - Checks if the country is the same as another, target country
is_same_empire = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_planet_class - Checks if the planet is of a certain class
is_planet_class = pc_tundra
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_strategic_resource - Checks if the planet has any strategic resource
has_strategic_resource = yes
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

ethos - Checks the average ethics divergence on the planet
ethos < 0.4
Supported Scopes: planet
Supported targets: none

is_star_class - Checks if the system/planet(star) is of a certain class
is_star_class = sc_black_hole
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

distance - Checks the ship/fleet/planet/leader/pop/system's galaxy map distance to target in absolute units
distance = { source = <target> min = 50 max = 120 }
Supported Scopes: planet ship pop fleet
Supported targets: none

has_technology - Checks if the country has a technology (of at least a specific level)
has_technology = tech_spaceport_4
Supported Scopes: country
Supported targets: none

has_planet_modifier - Checks if the planet has a specific planet modifier
has_planet_modifier = pm_titanic_life
Supported Scopes: planet
Supported targets: none

has_planet_flag - Checks if the planet has a specific flag
has_planet_flag = <flag>
Supported Scopes: planet
Supported targets: none

has_country_flag - Checks if the empire has a specific flag
has_country_flag = <flag>
Supported Scopes: country
Supported targets: none

has_fleet_flag - Checks if the fleet has a specific flag
has_fleet_flag = <flag>
Supported Scopes: fleet
Supported targets: none

has_ship_flag - Checks if the ship has a specific flag
has_ship_flag = <flag>
Supported Scopes: ship
Supported targets: none

is_ship_class - Checks if the ship/fleet is a specific class
is_ship_class = shipclass_colonizer
Supported Scopes: ship fleet
Supported targets: none

is_ship_size - Checks if the ship/fleet is a specific ship size
is_ship_size = mining_station
Supported Scopes: ship fleet
Supported targets: none

is_capital - Checks if the planet is its owner's capital
is_capital = yes
Supported Scopes: planet
Supported targets: none

has_ground_combat - Checks if ground combat is taking place on the planet
has_ground_combat = yes
Supported Scopes: planet
Supported targets: none

is_at_war - Checks if the country is at war
is_at_war = yes
Supported Scopes: country
Supported targets: none

num_owned_planets - Checks the country's number of owned planets
num_owned_planets < 8
Supported Scopes: country
Supported targets: none

has_government - Checks if the country has a specific government type
has_government = despotic_hegemony
Supported Scopes: country
Supported targets: none

num_pops - Checks the number of pops on the planet/country/pop faction
num_pops > 12
Supported Scopes: planet country
Supported targets: none

is_primitive - Checks if the country is a primitive, pre-FTL civilization
is_primitive = yes
Supported Scopes: country
Supported targets: none

is_inside_nebula - checks if the planet/ship/fleet is inside a nebula
is_inside_nebula = yes
Supported Scopes: planet ship fleet
Supported targets: none

is_pirate - Checks if the country is a pirate country
is_pirate = yes
Supported Scopes: country
Supported targets: none

is_inside_border - Checks if the planet/ship/fleet/system is inside the borders of the target country
is_inside_border = <target>
Supported Scopes: planet ship fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_country - Iterate through all countries
any_country = { <count=<num/all>> <triggers> }
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

planet_size - Checks the planet's size, in number of tiles
planet_size < 20
Supported Scopes: planet
Supported targets: ???

any_planet - Checks if any planet in the system/sector meets the specified criteria
any_planet = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

influence - Checks the country's Influence total
influence > 350
Supported Scopes: country
Supported targets: none

is_star - Checks if the planet is a star
is_star = yes
Supported Scopes: planet
Supported targets: none

is_asteroid - Checks if the planet is an asteroid
is_asteroid = yes
Supported Scopes: planet
Supported targets: none

is_overlord - Checks if the country is the overlord of any subject countries
is_overlord = yes
Supported Scopes: country
Supported targets: none

is_at_war_with - Checks if the country is at war with the target country
is_at_war_with = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

their_opinion - Checks target country's opinion value of the current country
their_opinion = { who = <target> value > 25 }
Supported Scopes: country
Supported targets: ???

is_same_species_class - Checks if the pop/country is of the same species class as another pop/country
is_same_species_class = <target>
Supported Scopes: country pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_federation - Checks if the country is in a federation
has_federation = yes
Supported Scopes: country
Supported targets: none

is_colonizable - Checks if the planet can theoretically be colonized
is_colonizable = yes
Supported Scopes: planet
Supported targets: none

gender - Checks the leader's gender
gender = female
Supported Scopes:
Supported targets: ???

has_level - Checks if the leader has a specific experience level
has_level > 2
Supported Scopes:
Supported targets: ???

num_minerals - Checks the planet's total amount of minerals
num_minerals < 20
Supported Scopes: planet
Supported targets: none

num_physics - Checks the planet's total amount of physics research
num_physics = 8
Supported Scopes: planet
Supported targets: none

num_society - Checks the planet's total amount of society research
num_society > 8
Supported Scopes: planet
Supported targets: none

num_engineering - Checks the planet's total amount of engineering research
num_engineering < 8
Supported Scopes: planet
Supported targets: none

num_modifiers - Checks the planet's number of modifiers
num_modifiers < 3
Supported Scopes: planet
Supported targets: none

has_any_strategic_resource - Checks if the planet has any strategic resource
has_any_strategic_resource = yes
Supported Scopes: planet
Supported targets: none

free_leader_slots - Checks the country's open leader slots
free_leader_slots > 1
Supported Scopes: planet country ship pop fleet
Supported targets: none

has_pop_flag - Checks if the pop has a specific flag
has_pop_flag = <flag>
Supported Scopes: pop
Supported targets: none

is_occupied_flag - Checks if the planet is under military occupation
is_occupied_flag = yes
Supported Scopes: planet
Supported targets: none

can_colonize - Checks if the planet can be colonized by target country's dominant species
can_colonize = { who = <target> status = yes }
Supported Scopes: planet
Supported targets: none

is_damaged - Checks if the ship is damaged
is_damaged = yes
Supported Scopes: ship
Supported targets: none

has_hp - Checks the ship's hull points
has_hp > 200
Supported Scopes: ship
Supported targets: none

is_surveyed - Checks if the planet/system has been survey by target country
is_surveyed = { who = <target> status = yes }
Supported Scopes: planet
Supported targets: none

has_global_flag - Checks if a Global Flag has been set
has_global_flag = <flag>
Supported Scopes: all
Supported targets: none

check_variable - Checks a variable for the country/leader/planet/system/fleet
check_variable = { which = <variable> value < 4 }
Supported Scopes: planet country fleet
Supported targets: none

any_planet_within_border - Checks if any planets within the country's borders meet the specified criteria
any_planet_within_border = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_owned_ship - Checks if any of the country's ships meet the specified criteria
any_owned_ship = { <triggers> }
Supported Scopes: country fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_ship - Checks if any ships in the game meet the specified criteria
any_ship = { <triggers> }
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

energy - Checks the country's Energy Credits total
energy < 2350
Supported Scopes: country
Supported targets: none

pop_has_ethic - Checks if the pop has a specific ethos
pop_has_ethic = ethic_fanatic_xenophile
Supported Scopes: pop
Supported targets: none

pop_has_trait - Checks if the pop has a specific trait
pop_has_trait = trait_decadent
Supported Scopes: pop
Supported targets: none

is_colony - Checks if the planet is colonized
is_colony = yes
Supported Scopes: planet
Supported targets: none

habitability - Checks the planet's habitability (0 to 1) for target pop/species
habitability = { who = <target> value = 0.6 }
Supported Scopes: planet
Supported targets: none

has_building - Checks if the planet/tile has any, or a specific, building
has_building = yes
has_building = building_capital_3
Supported Scopes: planet
Supported targets: none

is_controlled_by - Checks if the planet is controlled by the target country
is_controlled_by = <target>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_terraformed - Checks if the planet has ever been terraformed
is_terraformed = yes
Supported Scopes: planet
Supported targets: none

is_terraforming - Checks if the planet is currently being terraformed
is_terraforming = yes
Supported Scopes: planet
Supported targets: none

has_planet_edict - Checks if the planet has a specific edict active
has_planet_edict = edict_reeducation_campaign
Supported Scopes: planet
Supported targets: none

has_country_edict - Checks if the country has a specific edict active
has_planet_edict = society_research_focus
Supported Scopes: country
Supported targets: none

has_observation_outpost - Checks if the planet has an observation post
has_observation_outpost = yes
Supported Scopes: planet
Supported targets: none

is_federation_leader - Checks if the country is the leader of their federation
is_federation_leader = yes
Supported Scopes: country
Supported targets: none

starting_system - Checks if the system is the starting system for any country
starting_system = yes
Supported Scopes:
Supported targets: none

has_star_flag - Checks if the solar system has a specific flag
has_star_flag = <flag>
Supported Scopes:
Supported targets: none

has_mining_station - Checks if the planet has an orbital mining station
has_mining_station = yes
Supported Scopes: planet
Supported targets: none

has_research_station - Checks if the planet has an orbital researc station
has_research_station = yes
Supported Scopes: planet
Supported targets: none

has_spaceport - Checks if the planet has a spaceport
has_spaceport = yes
Supported Scopes: planet
Supported targets: none

any_spaceport - Checks if the planet's spaceport meets the specified criteria
any_spaceport = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_research_station - Checks if the planet's orbital research station meets the specified criteria
any_research_station = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_mining_station - Checks if the planet's orbital mining station meets the specified criteria
any_mining_station = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_system - Checks if any solar systems in the game meet the specified criteria
any_system = { <triggers> }
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_system_within_border - Checks if any systems within the country's borders meet the specified criteria
any_system_within_border = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

army_type - Checks the army's type
army_type = assault_army
Supported Scopes:
Supported targets: none

has_army - Checks if the planet has an army
has_army = yes
Supported Scopes: planet
Supported targets: none

is_advisor_active - checks if a country has an advisor
Supported Scopes: country
Supported targets: none

count_pops - Checks the number of pops in the scope that fulfill the specified criteria
count_pops = { limit = { <triggers> } count < 6 }
Supported Scopes: planet
Supported targets: none

is_enslaved - Checks if the pop is a slave
is_enslaved = yes
Supported Scopes: pop
Supported targets: none

is_being_purged - Checks if the pop is being purged
is_being_purged = yes
Supported Scopes: pop
Supported targets: none

graphical_culture - Checks if the country has specific graphical culture
graphical_culture = fungoid_01
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

income - Checks the country's monthly energy credit income
income < 90
Supported Scopes: country
Supported targets: none

expenses - Checks the country's monthly energy credit expenses
expenses > 28
Supported Scopes: country
Supported targets: none

produced_energy - Checks the country's gross amount of produced energy credits
produced_energy < 100
Supported Scopes: country
Supported targets: none

trade_income - Checks the country's energy credits income from trade for the previous month
trade_income < 30
Supported Scopes: country
Supported targets: none

trade_expenses - Checks the country's energy credits expenses from trade for the previous month
trade_expenses < 30
Supported Scopes: country
Supported targets: none

ship_maintenance - Checks the country's total ship maintenance expenses for the previous month, in energy credits
ship_maintenance < 226
Supported Scopes: country
Supported targets: none

army_maintenance - Checks the country's total army maintenance expenses for the previous month, in energy credits
army_maintenance > 226
Supported Scopes: country
Supported targets: none

colony_maintenance - Checks the country's total colony maintenance expenses for the previous month, in energy credits
colony_maintenance > 25
Supported Scopes: country
Supported targets: none

station_maintenance - Checks the country's total orbital station maintenance expenses for the previous month, in energy credits
station_maintenance > 126
Supported Scopes: country
Supported targets: none

construction_expenses - Checks the country's construction expenses for the previous month
construction_expenses > 290
Supported Scopes: country
Supported targets: none

federation_expenses - Checks the country's federation expenses for the previous month
federation_expenses < 1000
Supported Scopes: country
Supported targets: none

has_anomaly - Checks if the planet has an anomaly
has_anomaly = yes
Supported Scopes: planet
Supported targets: none

stored_physics_points - Checks the country's amount of stored physics research
stored_physics_points
Supported Scopes: country
Supported targets: none

stored_society_points - Checks the country's amount of stored society research
stored_society_points
Supported Scopes: country
Supported targets: none

stored_engineering_points - Checks the country's amount of stored engineering research
stored_engineering_points
Supported Scopes: country
Supported targets: none

balance - Checks the country's energy credit balance
balance < 39
Supported Scopes: country
Supported targets: none

running_balance - Checks the country's running energy credit balance
running_balance > 61
Supported Scopes: country
Supported targets: none

is_planet - Checks if the planet is the same as target planet
is_planet = <target>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_pop - Checks if the pop is the same as target pop
is_pop = <target>
Supported Scopes: pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_ship - Checks if the ship is the same as target ship
is_ship = <target>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_army - Checks if the army is the same as target army
is_army = <target>
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_country - Checks if the country is the same as target country
is_country = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_tutorial_level - Checks the country's tutorial level (0 off, 1 limited, 2 full)
is_tutorial_level = 0
Supported Scopes: country
Supported targets: none

is_multiplayer - Checks if the game is running in multiplayer
is_multiplayer = yes
Supported Scopes: all
Supported targets: none

has_event_chain - Checks if the country has a specific event chain
has_event_chain = old_gods_chain
Supported Scopes: country
Supported targets: none

is_species_class - Checks if the pop/country's founder species is a specific species class
is_species_class = MAM
Supported Scopes: country pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

vassals - Checks the country's number of vassals
vassals > 0
Supported Scopes: country
Supported targets: ???

has_opinion_modifier - Checks if the country has a specific opinion modifier towards target country
has_opinion_modifier = { who = <target> modifier = encroaching_colony }
Supported Scopes: country
Supported targets: none

has_established_contact - Checks if the country has established contact with target country
has_established_contact = <target>
Supported Scopes: country
Supported targets: none

has_completed_event_chain_counter - Checks if the country has completed a specific counter in an event chain
has_completed_event_chain_counter = { event_chain = amoebas_2_chain counter = amoebas_slaughtered }
Supported Scopes: country
Supported targets: none

has_planet_class - Checks if the system has planet of specific class
has_planet_class = pc_tundra
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_disabled - Checks if the ship/fleet is disabled
is_disabled = yes
Supported Scopes: ship fleet
Supported targets: ???

has_existing_ship_design - Checks if the country has a specific ship design available

Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

minerals - Checks the country's Minerals total
minerals > 3350
Supported Scopes: country
Supported targets: none

has_grown_pop - Checks if the planet/tile has a fully-grown pop
has_grown_pop = yes
Supported Scopes: planet
Supported targets: ???

has_growing_pop - Checks if the planet/tile has a still-growing pop
has_growing_pop = yes
Supported Scopes: planet
Supported targets: ???

has_resource - Checks if the planet/tile has a specific amount of a specific resource
has_resource = { type = minerals amount < 5 }
Supported Scopes: planet
Supported targets: ???

has_building_construction - Checks if the planet/tile has any, or a specific, ongoing building construction
has_building_construction = yes
has_building_construction = building_capital_3
Supported Scopes: planet
Supported targets: none

any_neighboring_tile - Checks if any of the tile's neighbors meet the specified criteria
any_neighboring_tile = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_tile - Checks if any tiles on the planet meet the criteria
any_tile = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_blocker - Checks if the planet/tile has any, or a specific, tile blocker
has_blocker = yes
has_blocker = tb_dangerous_wildlife
Supported Scopes: planet
Supported targets: none

free_pop_tiles - Checks the planet's number of open tiles for pops
free_pop_tiles < 6
Supported Scopes: planet
Supported targets: ???

free_building_tiles - Checks the planet's number of tiles available for new constructions
free_building_tiles > 2
Supported Scopes: planet
Supported targets: ???

has_relation_flag - Checks if the country has a relation flag towards target country
has_relation_flag = { who = <target> flag = <flag> }
Supported Scopes: country
Supported targets: ???

reverse_has_relation_flag - Checks if the target country has a relation flag towards the country
reverse_has_relation_flag = { who = <target> flag = <flag> }
Supported Scopes: country
Supported targets: ???

exists - Checks if a target scope exists
exists = <target>
Supported Scopes: all
Supported targets: ???

has_edict - Checks if the country/planet has a specific edict enabled
has_edict = crystal_sonar
Supported Scopes: planet country
Supported targets: ???

has_moon - Checks if the planet has a moon
has_moon = yes
Supported Scopes: planet
Supported targets: none

num_moons - Checks the planet's number of moons
num_moons < 4
Supported Scopes: planet
Supported targets: none

is_in_cluster - Checks if the planet/system belongs to a specific spawning cluster
is_in_cluster = resource_cluster_3
Supported Scopes: planet
Supported targets: ???

any_moon - Checks if any of the planet's moons meet the specified criteria
any_moon = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

num_adjacent_tiles - Checks the tile's number of adjacent tiles
num_adjacent_tiles < 2
Supported Scopes:
Supported targets: none

is_sentient - Checks if the pop is sentient
is_sentient = no
Supported Scopes: pop
Supported targets: none

leader_class - Checks if the leader is of a specific class
leader_class = scientist
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_preventing_anomaly - Checks if the planet is prevented from generating anomalies
is_preventing_anomaly = yes
Supported Scopes: planet country ship pop fleet
Supported targets: none

observation_outpost_owner - Checks if the planet's observation post's owner meets the specified criteria
observation_outpost_owner = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

observation_outpost - Checks if the planet's observation post meets the specified criteria
observation_outpost = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_deposit - Checks if the planet/tile has any, or a specific, deposit
has_deposit = yes
has_deposit = d_immense_engineering_deposit
Supported Scopes: planet
Supported targets: none

has_deposit_for - Checks if the planet has a deposit for a specific ship class
has_deposit_for = shipclass_mining_station
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

colony_age - Checks the planet's (colony's) age in months
colony_age > 12
Supported Scopes: planet
Supported targets: none

is_rim_system - Checks if the system is on the galactic rim
is_rim_system = yes
Supported Scopes: planet country ship pop fleet
Supported targets: OWNER

any_rim_system - Iterate through all rim systems
any_rim_system = { <count=<num/all>> <triggers> }
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_mission - Checks if the observation post has a specific mission
has_mission = technological_enlightenment_4
Supported Scopes: fleet
Supported targets: none

is_country_type - Checks if the country is a specific type
is_country_type = fallen_empire
Supported Scopes: country
Supported targets: none

has_modifier - Checks if the country/planet/pop has a certain modifier
has_modifier = <modifier>
Supported Scopes: planet country ship pop
Supported targets: none

switch - Switch case for a trigger
switch = {
	trigger = pop_has_ethic
	ethic_xenophile = { <effect> }
	ethic_xenophobe = { <effect> }
	default = { <effect> }
}
Supported Scopes: all
Supported targets: ???

sectors - Checks the country's number of sectors
 sectors < 4
Supported Scopes: country
Supported targets: none

num_fleets - Checks the country's number of fleets
num_fleets < 8
Supported Scopes: country
Supported targets: ???

num_ships - Checks the country/fleet's number of ships
num_ships > 39
Supported Scopes: country fleet
Supported targets: ???

any_ship_in_system - Checks if any ships in the system meet the specified criteria
any_ship_in_system = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

mission_progress - Checks if the observation post has achieved specific progress in a mission
mission_progress > 0.7
Supported Scopes: fleet
Supported targets: none

num_ethics - Checks the country/pop's number of ethics
num_ethics = 3
Supported Scopes: country pop
Supported targets: none

num_traits - Checks the country/pop/leader/species' number of traits
num_traits < 3
Supported Scopes: country pop
Supported targets: none

has_truce - Checks if the country has a truce with target country
has_truce = <target>
Supported Scopes: country
Supported targets: none

is_ringworld - Checks if the planet is a ringworld
is_ringworld = yes
Supported Scopes: planet
Supported targets: none

member_of_faction - Checks if the pop belongs to any, or a specific, faction
member_of_faction = no
Supported Scopes: pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

support - Checks the faction's support level
 support > 0.5
Supported Scopes:
Supported targets: none

is_ideal_planet_class - Checks if the planet is of the ideal class for target country
is_ideal_planet_class = { who = <target> status = yes }
Supported Scopes: planet
Supported targets: none

is_pop_faction_type - Checks the faction's type
is_pop_faction_type = malcontent_slaves
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_same_value - Checks if the current scope and the target scope are the same thing
is_same_value = <target>
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

sector_controlled - Checks if the planet/fleet is controlled by a sector
sector_controlled = yes
Supported Scopes: planet fleet
Supported targets: none

sectors_over_limit - Checks the country's number of sectors over its sector cap
sectors_over_limit > 0
Supported Scopes: country
Supported targets: none

is_orbital_tile - Checks if the tile is the tile that orbital stations work
is_orbital_tile = yes
Supported Scopes:
Supported targets: none

orbital_bombardment - Checks to what degree the planet is being bombarded
orbital_bombardment = limited
Supported Scopes: planet
Supported targets: none

intel_level - Checks the country's intel level of target system
intel_level = { level > low system = <target> }
Supported Scopes: country
Supported targets: none

members - Checks the number of members in the alliance
members < 5
Supported Scopes:
Supported targets: none

is_researching_area - Checks the scientist's field of research
is_researching_area = society
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_owned_leader - Checks if any of the country's leaders meet the specified criteria
any_owned_leader = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_owned_pop - Iterate through all owned pops
any_owned_pop = { <count=<num/all>> <triggers> }
Supported Scopes: planet country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_faction - Checks if the country has any instance of target faction type
has_faction = planet_separatists
Supported Scopes: country
Supported targets: none

count_owned_pops - Count the number of owned pops in the country that fulfill the specified criteria
count_owned_pops = { limit = { <triggers> } count > 12 }
Supported Scopes: planet country
Supported targets: none

can_declare_war - Checks if the country can declare war against target country
can_declare_war = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_hostile - Checks if the country is hostile towards target country
is_hostile = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_communications - Checks if the country has established communications with target country
has_communications = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_country_resource - Checks the country's amount of a specific stored resource
has_country_resource = { type = minerals amount > 99 }
Supported Scopes: country
Supported targets: ???

has_leader_flag - Checks if the leader has a specific flag
has_leader_flag = <flag>
Supported Scopes:
Supported targets: none

num_killed_ships - Checks how many of target country's ships that the country has destroyed
num_killed_ships = { target = <target> value > 5 }
Supported Scopes: country
Supported targets: ???

num_taken_planets - Checks how many planets the country has taken from target country
num_taken_planets = { target = <target> value > 1 }
Supported Scopes: country
Supported targets: ???

count_ships - Checks the number of ships in the galaxy that meet the specified criteria
count_ships = { limit = { <triggers> } count < 20 }
Supported Scopes: all
Supported targets: ???

count_owned_ships - Checks the country's number of ships that meet the specified criteria
count_owned_ships = { limit = { <triggers> } count < 20 }
Supported Scopes: country
Supported targets: ???

has_pop_faction_flag - Checks if the pop faction has a specific flag
has_pop_faction_flag = <flag>
Supported Scopes: pop
Supported targets: none

research_leader - Checks if the country's researcher in a specific field meets the specified criteria
research_leader = { area = engineering <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

leader_of_faction - Checks if the leader is the leader of a faction
leader_of_faction = yes
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_scope_valid - Checks if the current scope is valid
is_scope_valid = yes
Supported Scopes: all
Supported targets: none

opposing_ethics_divergence - Checks how far removed the country/pop's ethos is from target's
opposing_ethics_divergence = { steps > 1 who = <target> }
Supported Scopes: country pop
Supported targets: ???

is_war_leader - Checks if the country leads in a war
is_war_leader = yes
Supported Scopes: country
Supported targets: none

can_create_sector - Checks if the country can create a sector out of the target system
can_create_sector = <target>
Supported Scopes: country
Supported targets: OWNER

is_in_federation_with - Checks if the country is in a federation with target country
is_in_federation_with = <target>
Supported Scopes: country
Supported targets: none

can_change_policy - Checks if the country can change a specific policy
can_change_policy = slavery_not_allowed
Supported Scopes: country
Supported targets: ???

count_pop_factions - Checks the country's number of factions that meet the criteria
count_pop_factions = { limit = { <triggers> } count < 2 }
Supported Scopes: country
Supported targets: none

has_fleet_order - Checks if the ship/fleet has a specific fleet order
has_fleet_order = survey_planet_order
Supported Scopes: ship fleet
Supported targets: none

closest_system - Checks if any close-by systems meet the criteria
closest_system = { min_steps = 2 max_steps = 20 <triggers> }
Supported Scopes: all
Supported targets: ???

num_communications - Checks the country's number of established communications
num_communications > 3
Supported Scopes: country
Supported targets: none

is_ironman - Check if current game is running in ironman mode
is_ironman = yes
Supported Scopes: all
Supported targets: none

has_monthly_income - Checks the country's monthly income of a specific resource
has_monthly_income = { resource = engineering_research  value < 20 }
Supported Scopes: country
Supported targets: ???

last_changed_policy - Checks if the last policy changed by the country was a specific policy
last_changed_policy = slavery
Supported Scopes: country
Supported targets: ???

any_sector - Checks if any of the country's sectors meet the specified criteria
any_sector = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_policy_flag - Checks if the country has a specific policy
has_policy_flag = slavery_not_allowed
Supported Scopes: country
Supported targets: none

any_owned_fleet - Checks if any of the country's owned fleets meet the specified criteria
any_owned_fleet = { <targets> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

count_deposits - Checks the number of deposits on the tile/planet that meet the specified criteria
count_deposits = { limit = { <triggers> count < 2 }
Supported Scopes: planet
Supported targets: ???

has_ground_support_stance - Checks if the fleet has a specific orbital bombardment stance
has_ground_support_stande = light
Supported Scopes: fleet
Supported targets: none

has_tech_option - Checks if the country has a tech research option currently available
has_tech_option = tech_mining_network_2
Supported Scopes: country
Supported targets: none

is_species - Checks if the pop/country's founder species is of a specific pre-defined species
is_species = ROBOT_POP_SPECIES_2
Supported Scopes: pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

count_tech_options - Checks the country's number available tech research options in a specific field
count_tech_options = { area = physics count > 0 }
Supported Scopes: country
Supported targets: ???

last_increased_tech - Checks if the country's last researched technology was a specific tech
last_increased_tech = tech_gene_expressions
Supported Scopes: country
Supported targets: ???

has_country_strategic_resource - Checks if the country has a specific amount of a specific strategic resource
has_country_strategic_resource = { type = sr_pitharan amount > 1 }
Supported Scopes: country
Supported targets: ???

has_point_of_interest - Checks if the scoped country has a specific point of interest in its situation log
has_point_of_interest = { poi = <id> }
Supported Scopes: planet country ship fleet
Supported targets: ???

is_being_repaired - Checks if the ship/fleet is being repaired
is_being_repaired = yes
Supported Scopes: ship fleet
Supported targets: none

any_war - Checks if any wars meet the specified criteria
any_war = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_defender - Checks if any of the defenders in the war meet the specified criteria
any_defender = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_attacker - Checks if any attackers in the war meet the specified criteria
any_attacker = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_orbital_station - Checks if the planet has any kind of orbital station
has_orbital_station = yes
Supported Scopes: planet
Supported targets: none

any_orbital_station - Checks if the planet's orbital station meets the specified criteria
any_orbital_station = { <triggers> }
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_prev_building - Checks the building that was previously on the tile
has_prev_building = building_capital_3
Supported Scopes:
Supported targets: none

any_ambient_object - Checks if any ambient objects in the game meet the specified criteria
any_ambient_object = { <triggers> }
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_system_ambient_object - Checks if any ambient objects in the system meet the specified criteria
any_system_ambient_object = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_ambient_object_flag - Checks if the ambient object has a specific flag
has_ambient_object_flag = <flag>
Supported Scopes:
Supported targets: none

war_demand_counter - Checks the amount of war demands of a specific type
war_demand_counter = { type = liberated_or_vassalized value < 1 }
Supported Scopes: all
Supported targets: none

attacker_war_score - Checks the war score of the war's attackers
attacker_war_score > 60
Supported Scopes:
Supported targets: ???

defender_war_score - Checks the war score of the war's defenders
defender_war_score < 20
Supported Scopes:
Supported targets: ???

off_war_score_sum - Checks the country's total war score for all offensive wars
off_war_score_sum < 10
Supported Scopes: country
Supported targets: ???

def_war_score_sum - Checks the country's total war score for all defemsove wars
def_war_score_sum > 75
Supported Scopes: country
Supported targets: ???

any_bordering_country - Checks if the system has any bordering countries that meet the specified criteria
any_bordering_country = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

galaxy_percentage - Checks if the country has a specific percentage (0.00-1.00) of the galaxy within its borders
galaxy_percentage > 0.40
Supported Scopes: country
Supported targets: ???

custom_tooltip_fail - Shows custom text only when the associated trigger fails
custom_tooltip_fail = {
	text = <text>
	<triggers>
}
Supported Scopes: all
Supported targets: none

count_armies - Checks the number of armies on/in the planet/country that meet the specified criteria
count_armies = { limit = { <triggers> } count < 12 }
Supported Scopes: planet country
Supported targets: none

original_owner - Checks if the planet is still owned by its first colonizer
original owner = yes
Supported Scopes: planet
Supported targets: none

is_in_combat - Checks if the ship/fleet is engaged in combat
is_in_combat = yes
Supported Scopes: ship fleet
Supported targets: none

any_member - Checks if any members of the alliance meet the specified criteria
any_member = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_guaranteeing - Checks if the country is guaranteeing the independence of target country
is_guaranteeing = <target>
Supported Scopes: country
Supported targets: none

is_war_participant - Checks if target country is participating in the war on the specified side
is_war_participant = { who = <target> side = <target> }
Supported Scopes:
Supported targets: none

is_homeworld - Checks if the planet is its owner's homeworld
is_homeworld = yes
Supported Scopes: planet
Supported targets: none

years_passed - Checks the number of in-game years passed since the 2200 start
years_passed < 150
Supported Scopes: all
Supported targets: none

is_threatened_to - Checks if the country has a threatened attitude towards target country
is_threatened_to = <target>
Supported Scopes: country
Supported targets: none

is_protective_to - Checks if the country has a protective attitude towards target country
is_protective_to = <target>
Supported Scopes: country
Supported targets: none

is_friendly_to - Checks if the country has a friendly attitude towards target country
is_friendly_to = <target>
Supported Scopes: country
Supported targets: none

is_hostile_to - Checks if the country has a hostile attitude towards target country
is_hostile_to = <target>
Supported Scopes: country
Supported targets: none

is_ruined - Checks if the tile has a ruined building
is_ruined = yes
Supported Scopes:
Supported targets: none

is_dismissive_to - Checks if the country has a dismissive attitude towards target country
is_dismissive_to = <target>
Supported Scopes: country
Supported targets: none

is_patronizing_to - Checks if the country has a patronizing attitude towards target country
is_patronizing_to = <target>
Supported Scopes: country
Supported targets: none

is_angry_to - Checks if the country has an angry attitude towards target country
is_angry_to = <target>
Supported Scopes: country
Supported targets: none

is_neighbor_of - Checks if the country/planet is neighbors with target country
is_neighbor_of = <target>
Supported Scopes: planet country
Supported targets: none

any_neighbor_country - Checks if any of the country's neighbors meet the specified criteria
any_neighbor_country = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_rival - Checks if the country has a rival attitude towards target country
is_rival_to = <target>
Supported Scopes: country
Supported targets: none

is_unfriendly_to - Checks if the country has an unfriendly attitude towards target country
is_unfriendly_to = <target>
Supported Scopes: country
Supported targets: none

is_loyal_to - Checks if the country has a loyal attitude towards target country
is_loyal_to = <target>
Supported Scopes: country
Supported targets: none

is_disloyal_to - Checks if the country has a disloyal attitude towards target country
is_disloyal_to = <target>
Supported Scopes: country
Supported targets: none

is_cordial_to - Checks if the country has a cordial attitude towards target country
is_cordial_to = <target>
Supported Scopes: country
Supported targets: none

is_domineering_to - Checks if the country has a domineering attitude towards target country
is_domineering_to = <target>
Supported Scopes: country
Supported targets: none

fleet_power - Checks the country's total fleet power
fleet_power > 2500
Supported Scopes: country
Supported targets: none

has_election_type - Checks if the country has a specific election type
has_election_type = oligarchic
Supported Scopes: country
Supported targets: none

has_ai_personality - Checks if an AI empire has a certain personality type
has_ai_personality = fanatic_befrienders
Supported Scopes: country
Supported targets: none

has_ai_personality_behaviour - Checks if a country has a certain AI personality behavior
has_ai_personality_behaviour = slaver
Supported Scopes: country
Supported targets: none

has_valid_ai_personality - Checks if the country has a valid AI personality
has_valid_ai_personality = yes
Supported Scopes: country
Supported targets: none

has_migration_access - Checks if the country has migration access to target country
has_migration_access = <target>
Supported Scopes: country
Supported targets: none

grants_migration_access - Checks if the country is granting migration access to any other country
grants_migration_access = yes
Supported Scopes: country
Supported targets: none

logged_in_to_pdx_account - Checks if the local human is logged in to a Pdx account. This WILL cause an out of sync if used for anything that can change the game state
Supported Scopes: all
Supported targets: ???

tech_unlocked_ratio - Checks the relative amount of already-researched tech between the country and target country
tech_unlocked_ratio = { who = <target> ratio = 0.4 }
Supported Scopes: country
Supported targets: ???

has_special_project - Checks if the country has a specific special project available
has_special_project = EMERGENCY_BUOY_PROJECT
Supported Scopes: country
Supported targets: none

would_join_war - Checks if the country would join the side of target country in a hypothetical war
would_join_war = { attacker = <target> defender = <target> side = <target> }
Supported Scopes: country
Supported targets: none

can_be_subject - Checks if the country can be a subject of a specific type under target country
can_be_subject = { subject_type = tributary overlord = <target> }
Supported Scopes: country
Supported targets: ???

count_war_participants - Checks the number of participants in the war on a specific side that meet the specified criteria
count_war_participants = { limit = { <triggers> } side = target count < 4
Supported Scopes:
Supported targets: none

count_potential_war_participants - Checks the amount of potential war participants in a specific war that meet the specified criteria
count_potential_war_participants = { attacker = <target> defender = <target> side = <target> limit = { <triggers> } count > 2
Supported Scopes: all
Supported targets: none

has_skill - Checks if the leader has a specific experience level
has_skill > 2
Supported Scopes:
Supported targets: none

has_experience - Checks if the leader has a specific amount of experience
has_experience < 900
Supported Scopes:
Supported targets: none

any_neighbor_system - Checks if any of the system's neighboring systems meet the specified criteria
any_neighbor_system = { <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_under_colonization - Checks if the planet is being colonized
is_under_colonization = yes
Supported Scopes: planet
Supported targets: none

has_colony_progress - Checks the planet's progress towards completing colonization
has_colony_progress > 20
Supported Scopes: planet
Supported targets: none

is_growing - Checks if the pop is currently growing
is_growing = yes
Supported Scopes: pop
Supported targets: none

is_colony_pop - Checks if the pop is a designated colonization pop
is_colony_pop = yes
Supported Scopes: pop
Supported targets: none

is_subspecies - Checks if the pop/country/species is a subspecies of the target pop/country/species
is_subspecies = <target>
Supported Scopes: country pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_belligerent_to - Checks if the country has a belligerent attitude towards target country
is_belligerent_to = <target>
Supported Scopes: country
Supported targets: none

is_imperious_to - Checks if the country has a imperious attitude towards target country
is_imperious_to = <target>
Supported Scopes: country
Supported targets: none

is_arrogant_to - Checks if the country has a arrogant attitude towards target country
is_arrogant_to = <target>
Supported Scopes: country
Supported targets: none

has_association_status - Check if the country has federation association status with target country
has_association_status = <target>
Supported Scopes: country
Supported targets: none

is_original_owner - Checks if the target country is the planet's original owner
is_original_owner = <target>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_valid - Checks to see if target scope is valid for the country/planet/tile/army
is_valid = <target>
Supported Scopes: planet country
Supported targets: ???

fortification_health - Checks the planet's fortification health percentage
fortification_health > 90
Supported Scopes: planet
Supported targets: ???

subject_can_diplomacy - Checks if the country is allowed by its overlord to take diplomatic action towards target country
subject_can_diplomacy = <target>
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_surveyed_class - Checks if the country has surveyed any planet of a specific class
has_surveyed_class = pc_tundra
Supported Scopes: country
Supported targets: none

fleet_size - Checks the fleet's fleet size
fleet_size < 125
Supported Scopes: fleet
Supported targets: none

check_pop_faction_parameter - Checks if one of the faction's parameters is the same as target scope
check_pop_faction_parameter = { which = <parameter> value = <target> }
Supported Scopes:
Supported targets: none

is_robot_pop - Checks if the pop is a robot
is_robot_pop = yes
Supported Scopes: pop
Supported targets: none

host_has_dlc - Checks if the host has a specific DLC enabled
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

local_has_dlc - Checks if the local player has a specific DLC enabled
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

num_rare_techs - Checks the country's number of researched rare technologies
num_rare_techs < 4
Supported Scopes: country
Supported targets: none

is_core_sector - Checks if the sector is its owner country's core sector
is_core_sector = no
Supported Scopes:
Supported targets: ???

has_mandate - Checks if the leader has any, or a specific, mandate
has_mandate = no
has_mandate = mandate_shipwright
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_spaceport_module - Checks if the spaceport/planet has a specific module installed
has_spaceport_module = solar_panel_network
Supported Scopes: planet fleet
Supported targets: none

has_free_spaceport_module_slot - Checks if the spaceport/planet has one or more free module slots
has_free_spaceport_module_slot = yes
Supported Scopes: planet fleet
Supported targets: none

is_spaceport_module_slot_free - Checks if the spaceport/planet has a specific, numbered module slot free
is_spaceport_module_slot_free = 3
Supported Scopes: planet fleet
Supported targets: none

can_build_spaceport_module - Checks if the spaceport/planet can build a specific module
can_build_spaceport_module = fleet_academy
Supported Scopes: planet fleet
Supported targets: none

num_free_spaceport_module_slots - Checks the spaceport/planet's total number of free spaceport slots
num_free_spaceport_module_slots < 3
Supported Scopes: planet fleet
Supported targets: none

num_spaceport_modules - Checks the spaceport/planet's number of built modules
num_spaceport_modules < 3
Supported Scopes: planet fleet
Supported targets: none

nor - An inverted OR trigger
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

nand - An inverted AND trigger
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

num_energy - Checks the planet's total amount of energy
num_energy > 19
Supported Scopes: planet
Supported targets: none

species_portrait - Checks if the pop/empire's dominant species uses a certain portrait
species_portrait = rep13
Supported Scopes: country pop
Supported targets: none

num_armies - Checks the country's number of armies
num_armies < 20
Supported Scopes: country
Supported targets: ???

is_proposing_war_demands - Checks if currently proposing wardemands or handling existing wardemands
Supported Scopes: planet country ship pop fleet
Supported targets: ???

trust - Checks the country's trust of the target country
trust = { who = <target> value = 50 }
Supported Scopes: country
Supported targets: ???

num_war_demands - Checks the number of war demands
num_war_demands < 4
Supported Scopes: all
Supported targets: ???

max_naval_capacity - Checks the country's max naval capacity in absolute numbers
max_naval_capacity > 120
Supported Scopes: country
Supported targets: none

used_naval_capacity_integer - Checks the country's used naval capacity in absolute numbers
used_naval_capacity_integer < 89
Supported Scopes: country
Supported targets: none

used_naval_capacity_percent - Checks the country's used naval capacity in relative terms (0.00-1.00)
used_naval_capacity_percent < 0.75
Supported Scopes: country
Supported targets: none

war_begun_num_fleets_gone_mia - Checks amount of target country's fleets that went MIA when the war began
war_begun_num_fleets_gone_mia = { who = <target> value < 10 }
Supported Scopes:
Supported targets: none

custom_tooltip_success - Shows custom text only when the associated trigger passes
custom_tooltip_success = {
	text = <text>
	<triggers>
}
Supported Scopes: all
Supported targets: none

success_text - For 'desc={trigger={' use. Shows custom text when the associated trigger passes.
success_text = {
	text = <text>
	<triggers>
}
Supported Scopes: all
Supported targets: none

fail_text - For 'desc={trigger={' use. Shows custom text when the associated trigger fails.
fail_text = {
	text = <text>
	<triggers>
}
Supported Scopes: all
Supported targets: none

war_begun_num_wormhole_stations_destroyed - Checks amount of target country's wormhole stations that were destroyed when the war began
war_begun_num_wormhole_stations_destroyed = { who = <target> value < 3 }
Supported Scopes:
Supported targets: none

is_neutral_to - Checks if the country has a neutral attitude towards target country
is_neutral_to = <target>
Supported Scopes: country
Supported targets: none

is_subject_type - Checks if the country is a specific type of subject
is_subject_type = vassal
Supported Scopes: country
Supported targets: none

has_defensive_pact - Checks if the country has a defensive pact with target country
has_defensive_pact = <target>
Supported Scopes: country
Supported targets: none

calc_true_if - Returns true if the specified number of sub-triggers return true
calc_true_if = { amount = 2 <trigger> <trigger> <trigger> }
Supported Scopes: all
Supported targets: none

has_spaceport_construction - Checks if the planet is constructing a spaceport
has_spaceport_construction = yes
Supported Scopes: planet
Supported targets: none

is_researching_technology - Checks if the country is currently researching a specific technology
is_researching_technology = tech_gene_seed_purification
Supported Scopes: country
Supported targets: none

has_any_resource - Checks if the tile has any resource
has_any_resource = yes
Supported Scopes:
Supported targets: none

is_subject - Checks if the country is a subject of any other country
is_subject = no
Supported Scopes: country
Supported targets: none

any_subject - Checks if any of the country's subject states meet the specified criteria
any_subject = { <triggers> }
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

log - Prints a message to game.log for debugging purposes
log = <string>
Supported Scopes: planet country ship pop fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_same_ethos - Checks if a country has the same ethos (complete set of ethics) as a country or pop
has_same_ethos = <target>
Supported Scopes: country pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

is_majority_species - checks if a planet/country has a particular species as its dominant species
Supported Scopes: planet pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

has_closed_borders - Check if the country has closed its borders to target country
has_closed_borders = <target>
Supported Scopes: country
Supported targets: none

is_difficulty - Checks the game's difficulty level (0 normal, 1 hard, 2 insane)
is_difficulty = 2
Supported Scopes: all
Supported targets: none

is_exact_same_species - Checks if a pop/empire are originally of the same species, or currently of the exact same species instance, as another pop or empire
is_same_species = <target>
is_exact_same_species = <target>
Supported Scopes: country pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_support_effect_chance - Checks if the pop faction has any valid support effect(s) with a specific risk (0.00-1.00) of occurring
any_support_effect_chance > 0.25
Supported Scopes:
Supported targets: none

can_control_access_for - Checks if the country is allowed to control target country's border access to the country
can_control_access_for = <target>
Supported Scopes: country
Supported targets: none

is_overlord_to - Checks if the country has an overlord attitude towards target country
is_overlord_to = <target>
Supported Scopes: country
Supported targets: none

distance_to_core_percent - Checks the ship/fleet/planet/leader/pop/system's distance to the galactic core in percent, where center = 0 and galactic rim = 100
distance_to_core_percent < 60
Supported Scopes: all
Supported targets: ???

has_empire_unique_building - Checks if the tile has any empire-unique building
has_empire_unique_building = yes
Supported Scopes:
Supported targets: none

has_non_aggression_pact - Check if the country has a non-aggression pact with target country
has_non_aggression_pact = <target>
Supported Scopes: country
Supported targets: none

happiness_planet - Checks the average happiness on the planet
happiness_planet < 60
Supported Scopes: planet
Supported targets: none

count_fleet_ships - Checks the number of ships in the fleet that meet the specified criteria
count_fleet_ships = { limit = { <triggers> } count > 15 }
Supported Scopes: fleet
Supported targets: ???

pre_ruler_leader_class - Checks the rulers previous leader class
pre_ruler_leader_class = scientist
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

num_fallen_empires - Checks the number of fallen empires in the galaxy
num_fallen_empires > 3
Supported Scopes: country
Supported targets: none

has_hp_percentage - Checks a fleet or ship's hit points percentage
has_hp_percentage > 0.5
Supported Scopes: ship fleet
Supported targets: none

can_join_factions - Checks if scoped pop can join a faction
Supported Scopes: pop
Supported targets: ???

is_custodial_to - Checks if the country has a custodial attitude towards target country
is_custodial_to = <target>
Supported Scopes: country
Supported targets: none

has_pop - Checks if the tile has a pop
has_pop = yes
Supported Scopes:
Supported targets: ???

has_frontier_station - Checks if the planet has an orbital researc station
has_frontier_station = yes
Supported Scopes: planet
Supported targets: none

num_strategic_resources - Checks the country's num of strategic resources
num_strategic_resources < 3
Supported Scopes: country
Supported targets: none

is_crises_allowed - Check if current game allows crises
is_crises_allowed = yes
Supported Scopes: all
Supported targets: none

is_custom_capital_location - Checks if the spatial object is its owner's custom capital location
is_custom_capital_location = yes
Supported Scopes: planet ship fleet
Supported targets: ???

is_preferred_weapons - Checks if the country's AI prefers weapons using this component tag
is_preferred_weapons = energy
Supported Scopes: country
Supported targets: none

has_access_fleet - Checks if the system is accessible to the target country with construction vessels
has_access_construction = <target>
Supported Scopes:
Supported targets: ???

is_point_of_interest - Checks if the planet/country/ship/system/ambient object has a specific point of interest for a specific event chain for a specific country
is_point_of_interest = { id = <id> event_chain = <event_chain> owner = <target> }
Supported Scopes: planet country ship
Supported targets: ???

count_countries - Checks the number of countries in the scope that fulfill the specified criteria
count_countries = { count < 6 limit = { <triggers> } }
Supported Scopes: all
Supported targets: none

pop_percentage - Checks the percentage of pops in the scope that fulfill the specified criteria
pop_percentage = { percentage > 0.74 limit = { <triggers> } }
Supported Scopes: planet country
Supported targets: none

num_species - Checks if the number of species on a planet, in an empire or in a pop faction is according to the argument. Does not count genetically modified species as unique.
num_species > 8
Supported Scopes: planet country
Supported targets: none

num_unique_species - Checks if the number of species on a planet, in an empire or in a pop faction is according to the argument. Counts genetically modified species as unique.
num_unique_species < 12
Supported Scopes: planet country
Supported targets: none

has_diplo_migration_treaty - Checks if two countries have a migration treaty.
Supported Scopes: country
Supported targets: none

won_with_condition - Checks if two countries have a migration treaty.
Supported Scopes: country
Supported targets: none

terraformed_by - Checks if planet is terraformed by country.
Supported Scopes: planet
Supported targets: none

any_war_participant - Iterate through all war participants
any_war_participant = { <count=<num/all>> <triggers> }
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM

any_combatant_fleet - Iterate through each fleet this fleet is in combat with
any_combatant_fleet = { <count=<num/all>> <triggers> }
Supported Scopes: fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL RANDOM


=================
[19:43:06][consolecmdimpl.cpp:2502]: 
== EFFECT DOCUMENTATION ==
tooltip - Just a tooltip
Supported Scopes: planet country ship pop
Supported targets: all

hidden_effect - Prevents enclosed effects from being displayed in tooltip
hidden_effect = { <effects> }
Supported Scopes: all
Supported targets: none

custom_tooltip - Displays a specific localization string in tooltip
custom_tooltip = <string>
Supported Scopes: all
Supported targets: none

if - Executes enclosed effects if limit criteria are met
if = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

country_event - Fires a country event for the scoped country, with optional DAYS and RANDOM delay
country_event = { id = <event id> days = 30 random = 8 }
Supported Scopes: country
Supported targets: none

planet_event - Fires a planet event for the scoped planet, with optional DAYS and RANDOM delay
planet_event = { id = <event id> days = 30 random = 8 }
Supported Scopes: planet
Supported targets: none

random - All enclosed effects may or may not be executed depending on set chance
random = { chance = 50 <effects> }
Supported Scopes: all
Supported targets: none

random_list - Picks one random set of effects from a list, influenced by relative weight
random_list = { 50 = { <effects> } 20 = { <effects> } 30 = { <effects> } 999 = { <effects> } }
Supported Scopes: all
Supported targets: none

every_owned_planet - Executes enclosed effects on every planet -owned by the scoped country- that meet the limit criteria
every_owned_planet = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_owned_planet - Executes enclosed effects on a planet -owned by the scoped country- that meets the limit criteria
random_owned_planet = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

every_controlled_planet - Executes enclosed effects on every planet -controlled by the scoped country- that meet the limit criteria
every_controlled_planet = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_controlled_planet - Executes enclosed effects on a random planet -owned by the scoped country- that meets the limit criteria
random_controlled_planet = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

create_ship_design - Creates a new ship design for use with last_created_design target
create_ship_design = { design = <key> ftl = <target, optional, sets FTL drive to target country's> }
Supported Scopes: all
Supported targets: none

change_government - Change the scoped country's government type
change_government = <random / key>
Supported Scopes: country
Supported targets: none

ship_event - Fires a ship event for the scoped ship, with optional DAYS and RANDOM delay
ship_event = { id = <event id> days = 30 random = 8 }
Supported Scopes: ship
Supported targets: none

add_energy - Adds a sum of energy credits to the scoped country
add_energy = 500
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_minerals - Adds a sum of minerals to the scoped country (or planet/tile [DEPRECATED FUNCTIONALITY, USE ADD_DEPOSIT])
add_minerals = 3500
Supported Scopes: planet country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_physics - Adds Physics resources to a planet [DEPRECATED, USE ADD_DEPOSIT]
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_society - Adds Society resources to a planet [DEPRECATED, USE ADD_DEPOSIT]
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_engineering - Adds Engineering resources to a planet [DEPRECATED, USE ADD_DEPOSIT]
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

pop_event - Fires a pop event for the scoped pop, with optional DAYS and RANDOM delay
pop_event = { id = <event id> days = 30 random = 8 }
Supported Scopes: pop
Supported targets: none

every_war_defender - Executes enclosed effects on every defender that meets the limit criteria in the scoped country's war with a specific enemy
every_war_defender = { enemy = <target> limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

set_owner - Instantly sets the planet/fleet's owner to target country
set_owner = <target>
Supported Scopes: planet fleet
Supported targets: none

every_war_attacker - Executes enclosed effects on every attacker that meets the limit criteria in the scoped country's war with a specific enemy
every_war_attacker = { enemy = <target> limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_war_defender - Executes enclosed effects on a random defender that meets the limit criteria in the scoped country's war with a specific enemy
random_war_defender = { enemy = <target> limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

random_war_attacker - Executes enclosed effects on a random attacker that meets the limit criteria in the scoped country's war with a specific enemy
random_war_attacker = { enemy = <target> limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

give_technology - Instantly gives a specific tech to the scoped country
give_technology = tech_desert_colonization
Supported Scopes: country
Supported targets: none

enable_special_project - Enables a specific special research project for target country at a specific location (should be same as the current scope where possible)
enabble_special_project = { name = <project key> owner = <target> location = <target, ideally THIS> }
Supported Scopes: all
Supported targets: none

add_resource - Adds a resource to a planet or tile [DEPRECATED, USE ADD_DEPOSIT]
Supported Scopes: planet
Supported targets: none

add_physics_research - Instantly gives stored physics research points to the scoped county
add_physics_research = 300
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_society_research - Instantly gives stored society research points to the scoped county
add_society_research = 300
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_engineering_research - Instantly gives stored engineering research points to the scoped county
add_engineering_research = 300
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_country_flag - Sets an arbitrarily-named flag on the scoped country
set_country_flag = <key>
Supported Scopes: country
Supported targets: none

set_planet_flag - Sets an arbitrarily-named flag on the scoped planet
set_planet_flag = <key>
Supported Scopes: planet
Supported targets: none

set_fleet_flag - Sets an arbitrarily-named flag on the scoped fleet
set_fleet_flag = <key>
Supported Scopes: fleet
Supported targets: none

set_ship_flag - Sets an arbitrarily-named flag on the scoped ship
set_ship_flag = <key>
Supported Scopes: ship
Supported targets: none

remove_country_flag - Removes a flag from the scoped country
remove_country_flag = <key>
Supported Scopes: country
Supported targets: none

remove_planet_flag - Removes a flag from the scoped planet
remove_planet_flag = <key>
Supported Scopes: planet
Supported targets: none

remove_fleet_flag - Removes a flag from the scoped fleet
remove_fleet_flag = <key>
Supported Scopes: fleet
Supported targets: none

remove_ship_flag - Removes a flag from the scoped ship
remove_ship_flag = <key>
Supported Scopes: ship
Supported targets: none

every_owned_ship - Executes enclosed effects on every ship -owned by the scoped country- that meet the limit criteria
every_owned_ship = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_owned_ship - Executes enclosed effects on a random ship -owned by the scoped country/fleet- that meets the limit criteria
random_owned_ship = { limit = { <triggers> } <effects> }
Supported Scopes: country fleet
Supported targets: none

create_species - Creates a new species
create_species = {
	name = <string>
	plural = <string>
	class = <species class key>
	portrait = <random/portrait id>
	homeworld = <target>
	traits = { <specific/random traits> }
	sentient = <Y/N, determines if species is pre-sentient>
	is_mod = <Y/N, determines if species is a modification of another>
	immortal = <Y/N, determines if species leaders are immortal>
}
Supported Scopes: all
Supported targets: none

create_country - Creates a new country
create_country = {
	name = <string/random>
	type = <key>
	name_list = <key>
	ship_prefix = <string>
	government = <key>
	species = <target>
	flag = <random / { icon = { category = <key> file = <filename.dds> } background = { category = <key> file = <filename.dds> } colors = { <key> <key> } }
	ethos = <random / { ethic = <key> ethic = <key> }>
	effect = { <effects executed on country> }
}
Supported Scopes: all
Supported targets: none

create_fleet - Creates a new fleet
create_fleet = { name = <string> effect = { <create_ship, set_owner, set_location etc effects go here> } } 
Supported Scopes: all
Supported targets: none

create_army - Creates a new army
create_army = {
	name = <string>
	owner = <target>
	species = <target>
	type = <key>
}
Supported Scopes: planet
Supported targets: none

set_location - Sets the fleet/ambient object's location, can be fine-tuned
set_location = <target>
set_location = { target = <target> distance = <int/random> angle = <int/random> }
Supported Scopes: fleet
Supported targets: none

create_ship - Creates a new ship
create_ship = {
	name = <string/random>
	design = <ship design key/target, or use random_existing_design>
	random_existing_design = <ship size key>
	graphical_culture = <graphical culture key>
	prefix = <Y/N, determines if ship name should use owner country prefix>
}
Supported Scopes: fleet
Supported targets: none

set_primitive - [DEPRECATED, USE SET_COUNTRY_TYPE] Sets the scoped country as primitive
set_primitive = yes
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_pop - Creates a new pop on the scoped tile/planet
create_pop = {
	species = <target / key>
ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet
Supported targets: none

create_colony - Creates a colony on the scoped planet
create_colony_effect = {
owner = <target>
species = <target / key>
 ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet
Supported targets: none

set_capital - Sets the scoped planet to be the capital of its owner country
set_capital = yes
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

change_pc - Changes the class of the scoped planet
change_pc = <key>
Supported Scopes: planet
Supported targets: none

random_country - Iterate through all countries
random_country = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

random_pop - Executes enclosed effects on a random pop that meets the limit criteria
random_pop = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: none

kill_pop - Instantly destroys the scoped pop/pop on scoped tile
kill_pop = yes
Supported Scopes: pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

enslave_pop - Immediately enslaves or frees the scoped pop
enslave_pop = no
Supported Scopes: pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

destroy_colony - Destroys the colony on the scoped planet
destroy_colony = yes
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

every_system_planet - Executes enclosed effects on every planet within the scoped system that meets the limit criteria
random_system = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

surveyed - Sets the planet as un/surveyed by target country
surveyed = { set_surveyed = yes surveyor = <target> }
Supported Scopes: planet
Supported targets: none

add_experience - Adds a sum of experience points to the scoped leader
add_experience = 200
Supported Scopes: leader
Supported targets: none

set_ring - Adds or removes a planetary ring around the scoped planet
set_ring = no
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_mining_station - Creates a mining station in orbit of the scoped planet
create_mining_station = { owner = <target> }
Supported Scopes: planet
Supported targets: none

create_research_station - Creates a research station in orbit of the scoped planet
create_research_station = { owner = <target> }
Supported Scopes: planet
Supported targets: none

set_pop_flag - Sets an arbitrarily-named flag on the scoped country
set_country_flag = <key>
Supported Scopes: pop
Supported targets: none

remove_pop_flag - Removes a flag from the scoped pop
remove_fleet_flag = <key>
Supported Scopes: pop
Supported targets: none

every_owned_pop - Iterate through all owned pops
every_owned_pop = { limit = { <triggers> } <effects> }
Supported Scopes: planet country
Supported targets: none

set_name - Sets the name of the scoped country/planet/ship/fleet/leader/army/system/pop faction
set_name = <string>
Supported Scopes: leader star planet country ship fleet
Supported targets: none

random_planet - Executes enclosed effects on a random planet that meets the limit criteria
random_planet = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

add_modifier - Adds a specific modifier to the scoped planet/pop/country/fleet/ship/pop faction for a set duration
add_modifier = { modifier = <key> days = <int, -1 means it never expires> }
Supported Scopes: planet country ship pop fleet
Supported targets: none

create_leader - Creates a new leader for the scoped country
create_leader = {
	name = <random / string>
	species = <target / key>
	type = <random / key>
	skill = <random / int>
	set_age = <int>
 traits = { trait = <key> trait = <key> }
}
Supported Scopes: country
Supported targets: none

fleet_event - Fires a fleet event for the scoped fleet, with optional DAYS and RANDOM delay
fleet_event = { id = <event id> days = 30 random = 8 }
Supported Scopes: fleet
Supported targets: none

reduce_hp - Reduces the hull points of the scoped ship by a specific amount
reduce_hp = 120
Supported Scopes: ship
Supported targets: none

reduce_hp_percent - Reduces the hull points of the scoped ship by a relative amount
reduce_hp_percent = 0.25
Supported Scopes: ship
Supported targets: none

repair_ship - Restores all hull points to the scoped ship
repair_ship = yes
Supported Scopes: ship
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

destroy_country - Destroys the scoped country
destroy_country = yes
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_variable - Sets or creates an arbitrarily-named variable with a specific value in the current scope
set_variable = { which = <string> value = <int> }
Supported Scopes: leader star planet country fleet
Supported targets: none

remove_global_flag - Removes a global flag
set_global_flag = <key>
Supported Scopes: all
Supported targets: none

set_global_flag - Sets an arbitrarily-named global flag
set_global_flag = <key>
Supported Scopes: all
Supported targets: none

change_variable - Increments a previously-set variable by a specific amount
change_variable = { which = <string> = value = <int> }
Supported Scopes: leader star planet country fleet
Supported targets: none

random_planet_within_border - Executes enclosed effects on a random planet within the scoped country's borders that meets the limit criteria
random_planet_within_border = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

every_pop - Executes enclosed effects for every pop in the game that meet the limit criteria
every_pop = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

every_country - Iterate through all countries
every_country = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

every_ship - Executes enclosed effects for every ship in the game that meet the limit criteria
every_ship = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

every_planet - Executes enclosed effects for every planet in the game that meet the limit criteria
every_planet = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

add_influence - Adds a specific sum of influence to the scoped country
add_influence = 200
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

pop_add_ethic - Adds a specific ethic to the scoped pop
pop_add_ethic = <key>
Supported Scopes: pop
Supported targets: none

pop_remove_ethic - Removes a specific ethic from the scoped pop
pop_remove_ethic = <key>
Supported Scopes: pop
Supported targets: none

pop_migration - Sets the scoped pop's migration speed
Supported Scopes: pop
Supported targets: none

change_pop_species - Changes the scoped pop's species
change_pop_species = <target>
Supported Scopes: pop
Supported targets: none

create_rebels - Creates a rebellion
create_rebels = {
	name = <random / string>
	government = <random / key>
	species = <target>
	ethos = <random / { ethic = <key> ethic = <key> }
}
Supported Scopes: planet
Supported targets: none

cancel_terraformation - Cancels terraformation of the scoped planet
cancel_terraformation = yes
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_event_locked - Silently disables the scoped fleet to prevent player action, remember to unlock at the end of the event
set_event_locked = no
Supported Scopes: fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

clear_orders - Clears all fleet orders from the scoped fleet
clear_order = yes
Supported Scopes: fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

order_forced_return - Forces scoped fleet to retreat to friendly territory
order_forced_return = yes
Supported Scopes: fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

declare_war - Declares war betwee the scoped country and target country
declare_war = <target>
Supported Scopes: country
Supported targets: none

set_star_flag - Sets an arbitrarily-named flag on the scoped system
set_star_flag = <key>
Supported Scopes: star
Supported targets: none

remove_star_flag - Removes a flag from the scoped system
remove_star_flag = <key>
Supported Scopes: star
Supported targets: none

set_primitive_age - Sets a 'primitive age' for the scoped (primitive, pre-FTL) country
set_primitive_age = renaissance_age
Supported Scopes: country
Supported targets: none

spawn_system - Spawns a new system at a position relative to the scoped system/planet/ship
spawn_system = { min_distance = <int 0-100> max_distance = <int 0-100> initializer = <key for pre-defined system> }
Supported Scopes: star planet ship
Supported targets: none

random_research_station - Executes enclosed effects on a random orbital research station that meets the limit criteria
random_research_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: THIS

dismantle - Dismantles the scoped orbital station (fleet)
dismantle = yes
Supported Scopes: fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

random_mining_station - Executes enclosed effects on a random orbital mining station that meets the limit criteria
random_research_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: THIS

random_spaceport - Executes enclosed effects on a random spaceport that meets the limit criteria
random_spaceport = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: THIS

random_system - Executes enclosed effects on a random star system that meets the limit criteria
random_system = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: THIS

random_system_within_border - Executes enclosed effects on a random system within the scoped country's borders that meets the limit criteria
random_system_within_border = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: THIS

random_army - Executes enclosed effects on a random planet-bound army that meets the limit criteria
random_army = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: none

random_army_within_country - Executes enclosed effects on a random planet-bound army belonging to the scoped country that meets the limit criteria
random_army_within_country = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

set_advisor_active - Enables or disables the VIR window pop-in
set_advisor_active = no
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

save_event_target_as - Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain
save_event_target_as = <string>
Supported Scopes: all
Supported targets: none

save_global_event_target_as - Saves the current scope as an arbitrarily-named target to be referenced later, accessible globally until cleared
save_event_target_as = <string>
Supported Scopes: all
Supported targets: none

clear_global_event_target - Deletes the specified saved global target reference
clear_global_event_target = <string>
Supported Scopes: all
Supported targets: none

clear_global_event_targets - Deletes all saved global target references
clear_global_event_targets = yes
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

break - Prevents execution of subsequent effects in the same effect block, used with if-statements
break = yes
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_tutorial_level - Changes the scoped country's tutorial level (0 none, 1 limited, 2 full)
set_tutorial_level = 0
Supported Scopes: country
Supported targets: none

begin_event_chain - Starts a situation log event chain for target country
begin_event_chain = { event_chain = <key> target = <target> }
Supported Scopes: all
Supported targets: none

end_event_chain - Ends a specific situation log event chain for the scoped country
end_event_chain = <key>
Supported Scopes: country
Supported targets: none

queue_actions - Adds actions to the scoped fleet's action queue
queue_actions = { repeat = { <fleet actions> } }
Supported Scopes: fleet
Supported targets: none

while - Repeats enclosed effects while limit criteria are met or until set iteration count is reached
while = { limit = { <triggers> } <effects> }
 while = { count = 3 <effects> }
Supported Scopes: all
Supported targets: none

clear_fleet_actions - Clears all queued fleet actions for target fleet
clear_fleet_actions = <target>
Supported Scopes: fleet
Supported targets: none

destroy_fleet - Destroys the target fleet (with death graphics)
destroy_fleet = <target>
Supported Scopes: all
Supported targets: none

create_ambient_object - Creates a new ambient object
create_ambient_object = { type = <key> location = <target> }
For VFX use:
create_ambient_object = {
	type = <key>
	scale = <float>
	location = <target>
	use_3d_location = <bool, use 3D entity or 2D coordinate of the location entity as base>
	entity_offset = {
		min = <int>
		max = <int>
	}
	entity_offset_angle = {
		min = <int>
		max = <int>
	}
	entity_offset_height = {
		min = <int>
		max = <int>
	}
 entity_face_object = star/FROM/etc
 entity_scale_to_size = yes/no
	target = <target>
	duration = <int, days>
}
Supported Scopes: all
Supported targets: none

destroy_ambient_object - Destroys target ambient object
destroy_ambient_object = <target>
Supported Scopes: all
Supported targets: none

add_trait - Adds a specific trait to the scoped leader
add_trait = <leader>
Supported Scopes: leader
Supported targets: none

remove_trait - Removes a specific trait from the scoped leader
remove_trait = <key>
Supported Scopes: leader
Supported targets: none

modify_species - Creates a new, modified species based on an already-extant species
modify_species = { species = <target> add_trait = <key, optional> remove_trait = <key, optional> ideal_planet_class = <target> }
Supported Scopes: leader planet country pop
Supported targets: none

add_opinion_modifier - Adds a specific opinion modifier for the scoped country towards target country
add_opinion_modifier = { modifier = <key> who = <target> }
Supported Scopes: country
Supported targets: none

establish_contact - Establishes first contact between the scoped country and target country at the set location
establish_contact = { who = <target> location = <target> }
Supported Scopes: country
Supported targets: none

set_faction_hostility - Sets the aggro state of the scoped faction-type country
set_faction_hostility = { set_hostile = yes }
Supported Scopes: country
Supported targets: none

random_system_planet - Executes enclosed effects on a random planet within the scoped system that meets the limit criteria
random_system_planet = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

add_event_chain_counter - Increments (or decrements with negative values) an event chain counter for the scoped country by a specific amount
add_event_chain_counter = { event_chain = <key> counter = <key> amount = <int> }

Supported Scopes: country
Supported targets: none

add_anomaly - Adds a specific anomaly category to the scoped planet
add_anomaly = <key>
Supported Scopes: all
Supported targets: none

set_disable_at_health - Sets the scoped ship to become disabled at a certain hull point percentage
set_disable_at_health = <0-1 float>
Supported Scopes: ship
Supported targets: none

add_building_construction - Begins construction of a specific building on the scoped tile
add_building_construction = <key>
Supported Scopes:
Supported targets: none

set_building - Immediately adds a specific building to the scoped tile
set_building = <key>
Supported Scopes:
Supported targets: none

remove_building - Removes a building from the scoped tile
remove_building = yes
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

change_planet_size - Adds/Removes tiles to/from the scoped planet to adjust its planet size
change_planet_size = <+/- int>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_blocker - Adds a specific tile blocker to the scoped tile
set_blocker = <random / key>
Supported Scopes:
Supported targets: none

remove_blocker - Removes the tile blocker from the scoped tile
remove_blocker = yes
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

every_tile - Executes on every tile on planet
Supported Scopes: planet
Supported targets: none

random_tile - Executes enclosed effects on a random tile on the scoped planet that meets the limit criteria
random_tile = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: none

every_neighboring_tile - Executes enclosed effects on every one of the scoped tile's neighboring tiles that meet the limit criteria
every_neighboring_tile = { limit = { <triggers> } <effects> }
Supported Scopes:
Supported targets: none

random_neighboring_tile - Executes enclosed effects on a random tile neighboring  the scoped tile that meets the limit criteria
random_neighboring_tile = { limit = { <triggers> } <effects> }
Supported Scopes:
Supported targets: none

set_disabled - Enables or disables the scoped ship
set_disabled = no
Supported Scopes: ship
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_point_of_interest - Creates a point of interest for the scoped country at a specific location, associated with an event chain
create_point_of_interest = { id = <key> name = <string> desc = <string> event_chain = <key> location = <target> }
Supported Scopes: planet country ship pop
Supported targets: none

remove_point_of_interest - Removes a specific point of interest from the scoped country's situation log
remove_point_of_interest = <key>
Supported Scopes: country
Supported targets: none

set_relation_flag - Sets a relation flag for the scoped country towards target country
set_relation_flag = { who = <target> flag = <key> }
Supported Scopes: country
Supported targets: none

remove_relation_flag - Removes a specific relation flag towards target country from the scoped country
remove_relation_flag = { who = <target> flag = <key> }
Supported Scopes: country
Supported targets: none

random_moon - Executes enclosed effects on a random moon that meets the limit criteria
random_moon = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: none

every_moon - Executes enclosed effects on every moon that meets the limit criteria
every_moon = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: none

every_system_in_cluster - Executes enclosed effects on every system in the cluster that meet the limit criteria
every_system_in_cluster = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

create_cluster - Creates a cluster centered around the specified spatial object
Supported Scopes: all
Supported targets: none

kill_leader - Kills the scoped leader or leader of the scoped country/fleet/ship/planet/army
kill_leader = { type = general type = scientist etc. }
kill_leader = { type = <key, optional, if left out will kill scoped leader> show_notification = <yes/no> heir = <yes, optional, if added to type = ruler, will kill heir instead> }
Supported Scopes: leader planet country ship fleet
Supported targets: none

assign_leader - Assigns target leader to the scoped country/fleet/army/pop faction
assign_leader = <target>
Supported Scopes: country fleet
Supported targets: none

country_add_ethic - Adds a specific ethic to the scoped country
country_add_ethic = <key>
Supported Scopes: country
Supported targets: none

country_remove_ethic - Removes a specific ethic from the scoped country
country_remove_ethic = <key>
Supported Scopes: country
Supported targets: none

set_timed_country_flag - Sets an arbitrarily-named flag on the scoped country for a set duration
set_timed_country_flag = { flag = <key> days = <int> }
Supported Scopes: country
Supported targets: none

set_timed_fleet_flag - Sets an arbitrarily-named flag on the scoped fleet for a set duration
set_timed_fleet_flag = { flag = <key> days = <int> }
Supported Scopes: fleet
Supported targets: none

set_timed_global_flag - Sets an arbitrarily-named global flag for a set duration
set_timed_global_flag = { flag = <key> days = <int> }
Supported Scopes: all
Supported targets: none

set_timed_planet_flag - Sets an arbitrarily-named flag on the scoped planet for a set duration
set_timed_planet_flag = { flag = <key> days = <int> }
Supported Scopes: planet
Supported targets: none

set_timed_pop_flag - Sets an arbitrarily-named flag on the scoped pop for a set duration
set_timed_pop_flag = { flag = <key> days = <int> }
Supported Scopes: pop
Supported targets: none

set_timed_relation_flag - Sets an arbitrarily-named flag for the scoped country towards target country for a set duration
set_timed_relation_flag = { flag = <key> who = <target> days = <int> }
Supported Scopes: country
Supported targets: none

set_timed_ship_flag - Sets an arbitrarily-named flag on the scoped ship for a set duration
set_timed_ship_flag = { flag = <key> days = <int> }
Supported Scopes: ship
Supported targets: none

set_timed_star_flag - Sets an arbitrarily-named flag on the scoped system for a set duration
set_timed_system_flag = { flag = <key> days = <int> }
Supported Scopes: star
Supported targets: none

remove_army - Removes the scoped army
remove_army = yes
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

prevent_anomaly - Disables or enables anomaly generation for the scoped planet
prevent_anomaly = yes
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

every_planet_within_border - Executes enclosed effects on every planet within the scoped country's borders that meet the limit criteria
every_planet_within_border = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

every_planet_army - Executes enclosed effects on every planet-bound army that meets the limit criteria
every_planet_army = { limit = { <triggers> } <effects> }
Supported Scopes: planet
Supported targets: none

every_army_within_country - Executes enclosed effects on every planet-bound army belonging to the scoped country that meets the limit criteria
random_army = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

observation_outpost_owner - Executes enclosed effects on the owner of the observation post in orbit around the scoped planet
observation_outpost_owner = { <effects> }
Supported Scopes: planet
Supported targets: THIS

observation_outpost - Executes enclosed effects on every observation post in the game that meets the limit criteria
observation_outpost = { limit = { <triggers> } <effects> }
Supported Scopes: planet country
Supported targets: none

add_deposit - Adds a specific deposit to the scoped tile
add_deposit = <key>
Supported Scopes:
Supported targets: none

clear_deposits - Removes all deposits from the scoped tile
clear_desposits = yes
Supported Scopes:
Supported targets: none

join_alliance - Join federation with target
join_alliance = { who = <target> }
Supported Scopes: country
Supported targets: none

every_rim_system - Iterate through all rim systems
every_rim_system = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

random_rim_system - Iterate through all rim systems
random_rim_system = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

purge - Starts or stops purging the scoped pop/planet
purge = no
Supported Scopes: planet pop
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_planet_max_health - Sets the scoped planet's maximum health to a specific value
set_planet_max_health = <int>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_planet_health - Sets the scoped planet's current health to a specific value
set_planet_health = <int>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

remove_modifier - Removes a specific modifier from the scopes planet/country/pop
remove_modifier = <key>
Supported Scopes: planet country ship pop fleet
Supported targets: none

set_country_type - Changes the country type of the scoped country
set_country_type = <key>
Supported Scopes: country
Supported targets: none

add_ship_design - Adds a specific ship design to the scoped country
add_ship_design = <target>
Supported Scopes: country
Supported targets: none

add_mission_progress - Adds or subtracts progress to/from the scoped observation post's current mission
add_mission_progress = <+/- float>
Supported Scopes: fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_army_transport - Creates a new army in a new transport ship
create_army_transport = {
	ship_name = <string>
	graphical_culture = <key>
	army_name = <string>
	army_type = <key>
	species = <target>
}
Supported Scopes: fleet
Supported targets: none

set_spaceport_module - Adds a spaceport module to the specified slot in the scoped spaceport/planet's spaceport
set_spaceport_module = { slot = <int> module = <key> }
Supported Scopes: planet fleet
Supported targets: none

create_spaceport - Creates a spaceport in orbit of the scoped planet
create_spaceport = { owner = <target> initial_module = <key> }
Supported Scopes: planet
Supported targets: none

set_spaceport_level - Sets the level of scoped spaceport/planet's spaceport
set_spaceport_level = <int>
Supported Scopes: planet fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

switch - Executes the first appropriate effect set for a specific trigger
switch = {
	trigger = <trigger>
	<corresponding key/bool/int> = { <effect> }
	<corresponding key/bool/int> = { <effect> }
	default = { <effect> }
}
Supported Scopes: all
Supported targets: none

set_age - Sets the age of the scoped leader
set_age = <int>
Supported Scopes: leader
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_wormhole_station - Creates a wormhole station at the edge of the scoped system
create_wormhole_station = { owner = <target> angle = <random / int>
Supported Scopes: star
Supported targets: none

set_pop_faction - Sets the scoped pop to belong to a specific pop faction
set_pop_faction = <target>
Supported Scopes: pop
Supported targets: none

create_pop_faction - Creates a pop faction within the scoped country
create_pop_faction = { type = <key> parameter:<key> = <target, optional, saves the target to a parameter in the faction> pop = <target, the 'founding' pop> }
Supported Scopes: country
Supported targets: none

conquer - Conquers the planet by setting its owner to target country and adding an unhappiness modifier
conquer = <target country>
Supported Scopes: planet
Supported targets: none

add_support - Adds/subtracts support to/from the scoped pop faction
add_support = -0.25
Supported Scopes:
Supported targets: none

set_support - Sets the scoped pop faction's support level
set_support = <float>
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_graphical_culture - Sets the scoped country's graphical culture
set_graphical_culture = <key>
Supported Scopes: country
Supported targets: none

set_formation_scale - Scales the scoped fleet's formation's ship spacing, above and below 1.0
set_formation_scale = <float>
Supported Scopes: fleet
Supported targets: none

set_controller - Instantly sets the planet/fleet's controller to target country
set_controller = <target>
Supported Scopes: planet fleet
Supported targets: none

force_faction_evaluation - Forces target pop to immediately evaluate their attraction to various pop factions
force_faction_evaluation = <target>
Supported Scopes: pop
Supported targets: none

enable_faction_of_type - Forces scoped country to evaluate whether to create a specific faction type immediately, rather than monthly
enable_faction_of_type = <key>
Supported Scopes: country
Supported targets: none

clear_uncharted_space - Clears uncharted space from the galaxy map for the scoped country, in a radius around target system
clear_uncharted_space = { from = <target> radius = <int> }
Supported Scopes: country
Supported targets: none

every_owned_leader - Executes enclosed effects on every leader owned by scoped country that meets the limit criteria
every_owned_leader = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_owned_leader - Executes enclosed effects on a random leader owned by scoped country that meets the limit criteria
random_owned_leader = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

establish_communications - Establish communications between scoped country and target country
establish_communications = <target>
Supported Scopes: country
Supported targets: none

add_monthly_resource_mult - Adds a lump sum of a resource to the scoped country, defined as a multiple of the country's monthly income of that resource (clamped to max and min allowed values)
add_monthly_resource_mult = { resource = <key> value = <multiplier, float> max = <max cap, int> min = <min cap, int> }
Supported Scopes: country
Supported targets: none

pop_faction_event - Fires a pop faction event for the scoped pop faction, with optional DAYS and RANDOM delay
pop_faction_event = { id = <event id> days = 30 random = 8 }
Supported Scopes:
Supported targets: none

set_leader_flag - Sets an arbitrarily-named flag on the scoped leader
set_leader_flag = <key>
Supported Scopes: leader
Supported targets: none

remove_leader_flag - Removes a flag from the scoped leader
remove_leader_flag = <key>
Supported Scopes: leader
Supported targets: none

add_research_option - Adds a tech research option to the scoped country's tech view list, permanent until researched
add_research_option = <key>
Supported Scopes: country
Supported targets: none

load_parameters - Clears current parameters and loads new parameters from the target pop faction
load_parameters = <target>
Supported Scopes: all
Supported targets: PREVPREV

set_heir - Sets the target leader to be the scoped country's heir
set_heir = <target>
Supported Scopes: country
Supported targets: none

set_pop_faction_flag - Sets an arbitrarily-named flag on the scoped pop's faction/pop faction
set_pop_faction_flag = <key>
Supported Scopes: pop
Supported targets: none

remove_pop_faction_flag - Removes a flag from the scoped pop's faction/pop faction
remove_pop_faction_flag = <key>
Supported Scopes: pop
Supported targets: none

set_timed_pop_faction_flag - Sets an arbitrarily-named flag on the scoped pop faction for a set duration
set_timed_pop_faction_flag = { flag = <key> days = <int> }
Supported Scopes: pop
Supported targets: none

declare_white_peace_with - Declares white peace between scoped country and target country
declare_white_peace_with = <target>
Supported Scopes: country
Supported targets: none

leave_alliance - Removes scoped country from any alliances it is in
leave_alliance = yes
Supported Scopes: country
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_sector - Creates a sector with a specific capital planet, of a specific type, and with optional additional systems within the scoped country
create_sector = { capital = <target> type = <string> add = <target> add = <target>}
Supported Scopes: country
Supported targets: none

random_owned_pop - Iterate through all owned pops
random_owned_pop = { limit = { <triggers> } <effects> }
Supported Scopes: planet country
Supported targets: none

set_policy - Sets a policy to a specific option for the scoped country and specifies if policy cooldown should go into effect
set_policy = { policy = <key> option = <key> cooldown = <bool> }
Supported Scopes: all
Supported targets: none

recruitable - Sets scoped leader as non/recruitable
recruitable = yes
Supported Scopes: leader
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_tech_progress - Gives percentage progress (0.0-1.0) in a specific tech to the scoped country
add_tech_progress = { tech = <key> progress = <float> }
Supported Scopes: country
Supported targets: none

closest_system - Executes enclosed effects on a system -within a specific relative distance span- that meets the limit criteria
closest_system = { min_steps = <int, minimum # of systems 'away'> max_steps = <int, maximum # of systems 'away'> limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

random_sector - Executes enclosed effects on a random sector that meets the limit criteria
random_sector = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

every_sector - Executes enclosed effects on every sector that meets the limit criteria
every_sector = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_owned_fleet - Executes enclosed effects on a random fleet owned by the scoped country that meets the limit criteria
random_owned_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_ambient_object - Executes enclosed effects on a random ambient object in the game that meets the limit criteria
random_ambient_object = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

random_system_ambient_object - Executes enclosed effects on a random ambient object in the scoped system that meets the limit criteria
random_system_ambient_object = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

every_ambient_object - Executes enclosed effects on every ambient object in the game that meets the limit criteria
every_ambient_object = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: none

every_system_ambient_object - Executes enclosed effects on every ambient object in the scoped system that meets the limit criteria
every_system_ambient_object = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

set_ambient_object_flag - Sets an arbitrarily-named flag on the scoped ambient object
set_ambient_object_flag = <key>
Supported Scopes:
Supported targets: none

set_timed_ambient_object_flag - Sets an arbitrarily-named flag on the scoped ambient object for a set duration
set_timed_ambient_object_flag = { flag = <key> days = <int> }
Supported Scopes: fleet
Supported targets: none

remove_ambient_object_flag - Removes a flag from the scoped ambient object
remove_ambient_object_flag = <key>
Supported Scopes:
Supported targets: none

every_fleet_in_system - Executes enclosed effects on every fleet in the scoped system that meets the limit criteria
every_fleet_in_system = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

random_fleet_in_system - Executes enclosed effects on a random fleet in the scoped system that meets the limit criteria
random_fleet_in_system = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

set_aggro_range - Sets the scoped fleet/country's aggro range in intra-system units
set_aggro_range = <int>
Supported Scopes: country fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_fleet_stance - Sets the stance of the scoped fleet
set_fleet_stance = <key, aggressive/passive/evasive>
Supported Scopes: fleet
Supported targets: none

set_aggro_range_measure_from - Determines whether the scoped fleet/country's aggro range is measured from the fleet's current position or its spawn location
set_aggro_range_measure_from = <key, self/return_point>
Supported Scopes: country fleet
Supported targets: none

set_ruined - Sets or unsets the scoped tile's building to Ruined status
set_ruined = <bool>
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

random_neighbor_country - Executes enclosed effects on a random country -bordering the scoped country- that meets the limit criteria
random_neighbor_country = { limit = { <triggers> } <effects> }
Supported Scopes: all
Supported targets: THIS

establish_communications_no_message - Silently establish communications between scoped country and target country
establish_communications_no_message = <target>
Supported Scopes: country
Supported targets: none

set_subject_of - Sets the scoped country to be a specific subject of target country
set_subject_of = { who = <target> subject_type = <key> }
Supported Scopes: country
Supported targets: none

abort_special_project - Aborts a specific special project for the country, removing it from the situation log
abort_special_project = { type = <project key> location = <target> }
Supported Scopes: country
Supported targets: none

unassign_leader - Unassigns scoped leader from their post or unassigns leader from the scoped planet/ship/fleet/army/sector
unassign_leader = <target>
Supported Scopes: leader planet ship fleet
Supported targets: none

exile_leader_as - Exiles the scoped country/fleet/army/pop faction's leader and saves them with a custom name
exile_leader_as = <key>
Supported Scopes: leader country fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_leader - Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
set_leader = <key>
Supported Scopes: country fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_skill - Adds a sum of experience points to the scoped leader
add_experience = 200
Supported Scopes: leader
Supported targets: none

set_skill - Sets the scoped leader's level
set_skill = 3
Supported Scopes: leader
Supported targets: none

every_neighbor_system - Executes enclosed effects on every one of the scoped system's neighboring systems that meet the limit criteria
every_neighboring_system = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

random_neighbor_system - Executes enclosed effects on a random system neigboring the scoped system that meets the limit criteria
random_neighboring_system = { limit = { <triggers> } <effects> }
Supported Scopes: star
Supported targets: none

set_federation_leader - Sets a country to lead a federation
Supported Scopes: country
Supported targets: none

add_colony_progress - Adds to ongoing colonization progress on the scoped planet
add_colony_progress = <0.0-1.0 float>
Supported Scopes: planet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

start_colony - Starts colonization of the scoped planet
start_colony = {
	owner = <target>
	species = <target / key>
	ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet
Supported targets: none

subtract_variable - Decrements a previously-set variable by a specific amount
subtract_variable = { which = <string> = value = <int> }
Supported Scopes: leader star planet country fleet
Supported targets: none

multiply_variable - Multiplies a previously-set variable by a specific amount
multiply_variable = { which = <string> = value = <int> }
Supported Scopes: leader star planet country fleet
Supported targets: none

divide_variable - Divides a previously-set variable by a specific amount
divide_variable = { which = <string> = value = <int> }
Supported Scopes: leader star planet country fleet
Supported targets: none

remove_opinion_modifier - Removes a specific opinion modifier towards target country from the scoped country
remove_opinion_modifier = { modifier = <key> who = <target> }
Supported Scopes: country
Supported targets: none

add_war_demand - Adds a war demand to the scoped rebel country/war
add_war_demand = { type = <key> parameter:<parameter> = <target> target = <target> warscore_cost = <int> }
Supported Scopes: country
Supported targets: none

change_country_flag - Changes the scoped country's flag
change_country_flag = random
change_country_flag = { icon = { category = <key> file = <filename> } background = { category = <key> file = <filename> } colors = { <key> <key> } }
Supported Scopes: all
Supported targets: none

every_pop_faction - Executes enclosed effects on every pop faction within the scoped country that meets the limit criteria
every_pop_faction = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

random_pop_faction - Executes enclosed effects on a random pop faction within the scoped country that meets the limit criteria
random_pop_faction = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

kill_pop_faction - Deletes the scoped pop faction
kill_pop_faction = yes
Supported Scopes:
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

add_threat - Adds diplomatic threat from target country
add_threat = { who = <target> amount = 4 }
Supported Scopes: planet country
Supported targets: none

remove_sector - Removes a specific sector from the scoped country
remove_sector = <target>
Supported Scopes: country
Supported targets: PREVPREVPREVPREV

set_mission - Sets the current mission of an observation station
Supported Scopes: fleet
Supported targets: none

remove_spaceport_module - Removes a spaceport module from a spaceport. Argument is either a spaceport module slot number or a spaceport module tag
Supported Scopes: planet fleet
Supported targets: none

change_dominant_species - Changes the dominant species of the current Country
Supported Scopes: country
Supported targets: none

set_closed_borders - Changes closed borders status between two countries
Supported Scopes: country
Supported targets: none

every_war_participant - Iterate through all war participants
every_war_participant = { limit = { <triggers> } <effects> }
Supported Scopes:
Supported targets: none

repair_percentage - Restores all hull points to the scoped ship
repair_ship = yes
Supported Scopes: ship fleet
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

endgame_telemetry - Send endgame telemetry event
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

create_military_fleet - Creates a military fleet with the designs of a specified country.
Supported Scopes: all
Supported targets: none

guarantee_country - Makes a country guarantee another country
Supported Scopes: country
Supported targets: none

every_owned_fleet - Executes enclosed effects on every fleet owned by the scoped country that meets the limit criteria
every_owned_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: country
Supported targets: none

every_subject - switches Scope to and goes through all Subjects
Supported Scopes: country
Supported targets: none

random_subject - Scopes to a random Subject
Supported Scopes: country
Supported targets: none

delete_fleet - Deletes the target fleet (no death graphics)
delete_fleet = <target>
Supported Scopes: all
Supported targets: none

add_trust - Adds trust on scope country towards target country
add_trust = { amount = <amount> who = <target> }
Supported Scopes: country
Supported targets: none

join_war - Joins wars on the side of target country
join_war = <target>
Supported Scopes: country
Supported targets: none

add_global_ship_design - Adds a specific global design to the game
add_global_ship_design = <target>
Supported Scopes: all
Supported targets: none

log - Prints a message to game.log for debugging purposes.
Supported Scopes: all
Supported targets: THIS ROOT PREV PREVPREV PREVPREVPREV PREVPREVPREVPREV FROM FROMFROM OWNER CONTROLLER CAPITAL LEADER SOLAR_SYSTEM RANDOM

set_species_homeworld - Defines a homeworld for the current species.
Supported Scopes:
Supported targets: none

clear_resources - Clears resources of a tile
Supported Scopes:
Supported targets: none

every_mining_station - Executes enclosed effects on every orbital mining station in the game that meets the limit criteria
every_mining_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet country
Supported targets: none

every_research_station - Executes enclosed effects on every orbital mining station in the game that meets the limit criteria
every_mining_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet country
Supported targets: none

every_spaceport - Executes enclosed effects on every spaceport in the game that meets the limit criteria
every_spaceport = { limit = { <triggers> } <effects> }
Supported Scopes: planet country
Supported targets: none

set_timed_leader_flag - Sets an arbitrarily-named flag on the scoped leader for a set duration
set_timed_leader_flag = { flag = <key> days = <int> }
Supported Scopes: leader
Supported targets: none

set_species_identity - Sets the current species scopes identity to match the target scopes making them evaluate as the same species in is_same_species trigger.
Supported Scopes:
Supported targets: none

pop_force_add_ethic - Adds a specific ethic to the scoped pop regardless if pop-species allows ethic divergence or not. 
pop_add_ethic = <key>
Supported Scopes: pop
Supported targets: none

set_empire_name - Sets the name of the current Empire.
Supported Scopes: country
Supported targets: none

set_empire_flag - Sets the flag of the current Empire.
Supported Scopes: country
Supported targets: none

set_planet_name - Sets the name of the current planet.
Supported Scopes: planet
Supported targets: none

set_sector_name - Sets the name of the current sector.
Supported Scopes: planet
Supported targets: none

set_fleet_formation - Sets a custom fleet formation on a fleet. set_fleet_formation = { position = { x = 1 y = 1 } position = { x = 2 y = 1 } }
Supported Scopes: fleet
Supported targets: none

set_custom_capital_location - Sets a custom spatial object as custom country capital location.
Supported Scopes: country
Supported targets: none

build_pop - Creates a buildable pop on the scoped tile/planet
create_pop = {
	species = <target / key>
ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet
Supported targets: none

random_war_participant - Iterate through all war participants
random_war_participant = { limit = { <triggers> } <effects> }
Supported Scopes:
Supported targets: none

random_combatant_fleet - Iterate through each fleet this fleet is in combat with
random_combatant_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: fleet
Supported targets: none

every_combatant_fleet - Iterate through each fleet this fleet is in combat with
every_combatant_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: fleet
Supported targets: none


=================
